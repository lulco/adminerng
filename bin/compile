#!/usr/bin/env php
<?php

namespace Adminerng;

use FilesystemIterator;
use Phar;
use Nette\Utils\Finder;

require_once __DIR__ . '/../vendor/autoload.php';

/**
 * TODO add parameters (i.e.: languages - and compile only selected languages)
 * TODO optimize - do not include not needed files
 */
class Compile
{
    private $phar;

    private $appRoot;

    public function __construct()
    {
        $this->appRoot = realpath(__DIR__ . '/..') . '/';
    }

    public function run()
    {
        $name = 'index';
        $pharFile = $name . '.phar';
        if (!file_exists($this->appRoot . 'build')) {
            mkdir($this->appRoot . 'build');
        }
        $pharTarget = $this->appRoot . 'build/' . $pharFile;
        $phpTarget = $this->appRoot . 'build/' . $name . '.php';

        $this->phar = new Phar($pharTarget, FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::KEY_AS_FILENAME, $pharFile);
        $this->phar->startBuffering();
        $this->addFile($this->appRoot . 'app/bootstrap_live.php', 'app/bootstrap.php');

        $files = Finder::findFiles([
            '*.php',
            '*.phtml',
            '*.neon',
            '*.latte',
            '*.css',
            '*.js',
            '*.eot',
            '*.ttf',
            '*.woff',
            '*.woff2',
            '*.ico',
        ])->from([
            $this->appRoot . 'www/',
            $this->appRoot . 'app/Core/',
            $this->appRoot . 'app/Drivers/',
            $this->appRoot . 'app/Router/',
            $this->appRoot . 'app/components/',
            $this->appRoot . 'app/config/',
            $this->appRoot . 'app/lang/',
            $this->appRoot . 'app/presenters/',
            $this->appRoot . 'vendor/nette/',
            $this->appRoot . 'vendor/tracy/',
            $this->appRoot . 'vendor/latte/',
            $this->appRoot . 'vendor/lulco/',
            $this->appRoot . 'vendor/tomaj/',
            $this->appRoot . 'vendor/php-amqplib/',
            $this->appRoot . 'vendor/predis/',
            $this->appRoot . 'vendor/radekdostal/'
        ])->exclude([
            '.git',
            '.svn',
            'LICENSE',
            'Tests',
            'tests',
            'docs',
            'examples',
        ]);

        foreach ($files as $file) {
            $this->addFile($file);
        }

        $this->addFile($this->appRoot . 'vendor/autoload.php');
        $this->addFile($this->appRoot . 'vendor/composer/autoload_classmap.php');
        $this->addFile($this->appRoot . 'vendor/composer/autoload_files.php');
        $this->addFile($this->appRoot . 'vendor/composer/autoload_namespaces.php');
        $this->addFile($this->appRoot . 'vendor/composer/autoload_psr4.php');
        $this->addFile($this->appRoot . 'vendor/composer/autoload_real.php');
        $this->addFile($this->appRoot . 'vendor/composer/autoload_static.php');
        $this->addFile($this->appRoot . 'vendor/composer/ClassLoader.php');

        $this->phar->setStub('<?php
        Phar::mapPhar(\'' . $pharFile . '\');
        require \'phar://' . $pharFile . '/www/index.php\';
        __HALT_COMPILER(); ?>');

        $this->phar->stopBuffering();

        copy($pharTarget, $phpTarget);
    }

    private function addFile($filepath, $pharPath = null)
    {
        if (!file_exists($filepath)) {
            return false;
        }
        if ($pharPath === null) {
            $realPath = realpath($filepath);
            $pharPath = str_replace($this->appRoot, '', $realPath);
        }
        $this->phar->addFromString($pharPath, file_get_contents($filepath));
        return true;
    }
}

$compile = new \Adminerng\Compile();
$compile->run();
